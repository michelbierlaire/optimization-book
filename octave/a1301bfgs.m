%> \file
%>  BFGS method with line search. Implementation of algorithm 13.1 of \cite Bier06-book
%> 
%> @author Michel Bierlaire
%> @date Mon Apr 14 14:46:53 2014
%> @ingroup Algorithms

%> Applies BFGS algorithm with line search to solve \f$\min_x f(x)\f$ where \f$f:\mathbb{R}^n\to\mathbb{R}\f$. 
%> @param obj the name of the Octave function defining f(x) and its derivatives
%> @param x0 the starting point
%> @param eps  algorithm stops if \f$\|\nabla f(x)\| \leq \varepsilon \f$. 
%> @param maxiter maximum number of iterations (Default: 100)
%> @return [solution,iteres,niter] solution: local minimum of the function, iteres: sequence of iterates generated by the algorithm, niter: total number of iterations
function [solution,iteres,niter] = a1301bfgs(obj,x0,eps,maxiter=100)
  iteres = zeros(1+ maxiter,4) ;
  n = size(x0,1) ;
  I = eye(n) ;
  Hinv = eye(n) ; 
  xk = x0 ;
  [f,g] = feval(obj,xk)  ;
  iteres(1,:) = [xk'  f  norm(g) ] ;
  k = 0 ;
  do
    printf("x = (%f,%f) f = %f\n", xk(1), xk(2), f)
    printf("H = [[%f,%f],[%f,%f]]\n",Hinv(1,1),Hinv(1,2),Hinv(2,1),Hinv(2,2))
    d = - Hinv * g ;
    printf("d = (%f,%f) g = (%f, %f)\n",d(1),d(2),g(1),g(2))
    alpha = a1102linesearch(obj,xk,d,1.0,0.3,0.7,2) ;
    printf("alpha = %f\n",alpha) 
    xold = xk ;
    gold = g ;
    xk = xk + alpha * d ;
    [f,g,H] = feval(obj,xk);
    k=k+1 ; 
    iteres(k+1,:) = [xk' f  norm(g) ] ;
    d = xk - xold ;
    y = g - gold ;
    denom = d' * y ;
    printf("denom = %f\n",denom)
    T1 = (I - (d * y') / denom)
    T2 = (I - (y * d') / denom)
    printf("T1 =  [[%f,%f],[%f,%f]]\n",T1(1,1),T1(1,2),T1(2,1),T1(2,2))
    printf("T2 =  [[%f,%f],[%f,%f]]\n",T2(1,1),T2(1,2),T2(2,1),T2(2,2))
    Hinv = (I - (d * y') / denom) * Hinv * (I - (y * d') / denom) + d * d' / denom ;
    printf("result = [[%f,%f],[%f,%f]]\n",Hinv(1,1),Hinv(1,2),Hinv(2,1),Hinv(2,2))
  until (norm(g) <= eps || k >= maxiter)
  Hinv
  solution = xk ;
  niter = k ;
endfunction
