%> \file
%> Newton's method with trust region. Implementation of algorithm 12.4 of \cite Bier06-book
%> 
%> @author Michel Bierlaire
%> @date Wed Apr  9 18:29:33 2014
%> @ingroup Algorithms

%> Applies Newton's algorithm with trust region to solve \f$\min_x f(x)\f$ where \f$f:\mathbb{R}^n\to\mathbb{R}\f$. The parameters of the method are taken from \cite ConnGoulToin00 (p. 117). 
%> @param obj the name of the Octave function defining f(x) and its derivatives
%> @param x0 the starting point
%> @param delta0 radius of the initial trust region
%> @param eps  algorithm stops if \f$\|F(x)\| \leq \varepsilon \f$. 
%> @param tr method to solve the trust region subproblem. If 0, the dogleg method is used. If different from 0, the truncated conjugate gradient is used (default: 0). 
%> @param maxiter maximum number of iterations (Default: 100)
%> @return [solution,iteres,niter] solution: local minimum of the function, iteres: sequence of iterates generated by the algorithm, niter: total number of iterations
function [solution,iteres,niter] = a1204newton(obj,x0,delta0,eps, tr=0,maxiter=100)

  iteres = zeros(1+ maxiter,4) ;


  eta1 = 0.01 ;
  eta2 = 0.9 ;
  k=0 ;
  xk = x0 ;
  [f,g,H] = feval(obj,xk)  ;
  iteres(1,:) = [xk'  f  norm(g) ] ;
  k = 0 ;
  delta = delta0 ;
  printf("%+10.5e,%+10.5e\n",xk(1),xk(2)) ;
  do
  k=k+1 ;
  if (tr == 0)
    [step,type] = a1202dogleg(g,H,delta) ;
  else 
    [step,type] = a1203trunccg(g,H,delta) ;
  endif
  [fc,gc,Hc] = feval(obj,xk+step) ;
  num = f - fc;
  denom = -step'*g - 0.5 * step' * H * step ;
  rho = num / denom ;
  if (rho < eta1)
    delta = norm(step) / 2.0 ;
    status = "- " ;
  else
    xk = xk + step ;
    f = fc ;
    g = gc ;
    H = Hc ;
    if (rho >= eta2)
      delta = 2 * delta ;
      status = "++" ;
    else
      status = "+ " ;
    endif
  endif
  iteres(k+1,:) = [xk' f  norm(g) ] ;
  until (norm(g) <= eps  || k >= maxiter)
  solution = xk ;
  niter = k ;