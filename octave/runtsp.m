%> @file 
%> n cities randomly generated for the TSP problem with Euclidean distances
%> Each city belongs to a cell of a 3 x 4 grid. The exact position in the cell is random.
%> @author Michel Bierlaire
%> @date Sat Apr  5 19:18:51 2014
%> @ingroup Examples
n = 16
coord = [3.9168352575438883 9.137342270173304;
1.1699050319257487 18.455418341069745;
9.721881077629464 28.346794704912273;
7.390077284252903 39.41399505514082;
10.330134350013772 8.872575373705086;
17.54844435443345 12.555248083372415;
13.973337600200706 27.293670391120408;
10.780367650957938 32.30890310240921;
27.537494117722936 3.405255742784993;
22.109051040277585 13.629868632672725;
22.104604981898312 24.4082789143701;
22.642443138528456 39.900926037817364;
30.483507633842855 3.3699397182036805;
39.342134080320214 14.52455206463652;
37.63893123807275 21.751973125910553;
30.059401007763743 32.48285416836698;
]
dist = [
0.0 9.714533819356818 20.067426835939678 30.47522131236423 6.418762089292642 14.053570603882223 20.755372562383855 24.16669833298403 24.306220211016388 18.738716823819537 23.748609928524573 36.01453146635736 27.185492700079436 35.8325805106548 36.00428681346874 35.04920355433587 ;
9.714533819356818 0.0 13.07576462993552 21.862124341614727 13.256722087195223 17.40886439170422 15.557717854190203 16.860605913918985 30.36045369279353 21.487991193857262 21.764609139622404 30.34764724176764 32.96754408177944 38.37408995932399 36.61771628425363 32.114979894543005 ;
20.067426835939678 13.07576462993552 0.0 11.310182691844737 19.483716036817256 17.624642902086944 4.379949016097465 4.101060445717962 30.650879820874017 19.23616106969621 12.99398929973783 17.333172670563272 32.479045895572966 32.686599387976536 28.68542071017215 20.75383590553424 ;
30.47522131236423 21.862124341614727 11.310182691844737 0.0 30.682605034571637 28.715583059133714 13.7928092261437 7.872509157018777 41.261940234637436 29.68954974061346 21.01639460664366 15.260136497900703 42.807481243861446 40.502077797030054 35.027705950406364 23.705251571616774 ;
6.418762089292642 13.256722087195223 19.483716036817256 30.682605034571637 0.0 8.10346084129699 18.77790381173618 23.44065202660764 18.055049546374008 12.703334898678944 19.49349232858348 33.38190367008527 20.891085512116195 29.557418169828928 30.193530332387017 30.768315319728924 ;
14.053570603882223 17.40886439170422 17.624642902086944 28.715583059133714 8.10346084129699 0.0 15.165832665095717 20.880942241078237 13.546345448359208 4.685503459388833 12.698540843098577 27.816091141649967 15.864606890987382 21.882483178077504 22.095416147466672 23.529418196381776 ;
20.755372562383855 15.557717854190203 4.379949016097465 13.7928092261437 18.77790381173618 15.165832665095717 0.0 5.9453861308706095 27.470760754712394 15.902493882193621 8.628035303982173 15.300205416132071 29.067690032921977 28.401165780394834 24.30577566777337 16.902339016425437 ;
24.16669833298403 16.860605913918985 4.101060445717962 7.872509157018777 23.44065202660764 20.880942241078237 5.9453861308706095 0.0 33.40991047747162 21.845946902275735 13.8079040295076 14.083594964517575 35.00967476195039 33.64606430773401 28.858815091610843 19.279818104592653 ;
24.306220211016388 30.36045369279353 30.650879820874017 41.261940234637436 18.055049546374008 13.546345448359208 27.470760754712394 33.40991047747162 0.0 11.57629919245018 21.694314156209273 36.82248598849107 2.9462251880590316 16.216913249434665 20.94375970623858 29.186756321342784 ;
18.738716823819537 21.487991193857262 19.23616106969621 29.68954974061346 12.703334898678944 4.685503459388833 15.902493882193621 21.845946902275735 11.57629919245018 0.0 10.778411198689481 26.276471686946124 13.243778334277073 17.25629188175824 17.52557446581836 20.460770469720924 ;
23.748609928524573 21.764609139622404 12.99398929973783 21.01639460664366 19.49349232858348 12.698540843098577 8.628035303982173 13.8079040295076 21.694314156209273 10.778411198689481 0.0 15.50198002754442 22.64547914670201 19.870089729517737 15.759798624191689 11.334793573135029 ;
36.01453146635736 30.34764724176764 17.333172670563272 15.260136497900703 33.38190367008527 27.816091141649967 15.300205416132071 14.083594964517575 36.82248598849107 26.276471686946124 15.50198002754442 0.0 37.36301987130433 30.378282268391867 23.54313375739059 10.489950156904579 ;
27.185492700079436 32.96754408177944 32.479045895572966 42.807481243861446 20.891085512116195 15.864606890987382 29.067690032921977 35.00967476195039 2.9462251880590316 13.243778334277073 22.64547914670201 37.36301987130433 0.0 14.244319538588709 19.72559857540505 29.116003403846673 ;
35.8325805106548 38.37408995932399 32.686599387976536 40.502077797030054 29.557418169828928 21.882483178077504 28.401165780394834 33.64606430773401 16.216913249434665 17.25629188175824 19.870089729517737 30.378282268391867 14.244319538588709 0.0 7.42539663040213 20.21558180575527 ;
36.00428681346874 36.61771628425363 28.68542071017215 35.027705950406364 30.193530332387017 22.095416147466672 24.30577566777337 28.858815091610843 20.94375970623858 17.52557446581836 15.759798624191689 23.54313375739059 19.72559857540505 7.42539663040213 0.0 13.137773268690506 ;
35.04920355433587 32.114979894543005 20.75383590553424 23.705251571616774 30.768315319728924 23.529418196381776 16.902339016425437 19.279818104592653 29.186756321342784 20.460770469720924 11.334793573135029 10.489950156904579 29.116003403846673 20.21558180575527 13.137773268690506 0.0 ;
]

firstSolution = [
    1
    7
   10
    3
   16
   15
   11
    4
    6
   14
    8
    2
   12
   13
    5
    9] ;
%tspPrintSlide(coord,firstSolution,close,dist,1,1,labels=1)


%firstSolution = aNearestNeighbor(dist)
%tspPrintSlide(coord,firstSolution,close,dist,1,1,labels=1)

%for i=1:8
% printf("%d: %.2f - %.2f\n",i,coord(i,1),coord(i,2));
%printf("%d & %.2f & %.2f  & %d & %.2f & %.2f \n",i,coord(i,1),coord(i,2),i+8,coord(i+8,1),coord(i+8,2))

%endfor

%localOptimum = aTspLocalSearch(firstSolution,dist)
[fff,msg] = fopen("solTspSimAnn.dat","w")  ;

for i=1:100
  [localOptimum,length] = aTspSimulatedAnnealing(firstSolution,dist)
fprintf(fff,"%f\n",length)
endfor
fclose(fff)
%[localOptimum,length] = aTspVns(firstSolution,dist)
%tspPrintSlide(coord,localOptimum,close,dist,1,1,labels=1)

%seq = [ 1 2 3 7 8 4 12 16 11 10 6 5]' ;
%list = getTourList(seq,16) ;
%[l,m]=aSubtourLength(list,dist) ;
%tspPrintSubtour(coord,list,l,dist,1) ;
%printf("Length subtour: %f\n",l) ;
%
%outc = [15 14 13 9 ]';
%for j = 1:4
%  outc(j)
%  [bestnode,bestlength] = aBestInsert(list,dist,outc(j))
%endfor

%firstSubtour = zeros(n,1)  ;

%tour = aTspInsertion(dist,firstSubtour) 
%tspPrintSlide(coord,tour,close,dist,1,1,labels=1)

%[best,bestLength] = aTspVns(firstSolution,dist)

%x=[    2    3    7   12    0    0    8    4    0    0    0   16    0    0    0   11] ;

%[l,m] = aSubtourLength(x,dist)

%tour = [    1    2    3    7    8    4   12   16   15   14   13    9   11   10    6    5]' ;
%length = tspCalculateLength(tour,dist) 

%x = [    2    3    7   12    0    0    8    4    0    0   16   11    0    0    0    0] ;
%[l,m] = aSubtourLength(x,dist)
%tspPrintSubtour(coord,x,aSubtourLength(x,dist),dist,1) ;

%tour = [    1    2    3    7    8    4   12   11   16   15   14   13    9   10    6    5]' ;
%length = tspCalculateLength(tour,dist) 
%tspPrintSlide(coord,tour,1,dist,1,1,1) ;

