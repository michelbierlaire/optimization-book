%> \file
%>  Gauss-Newton method. Implementation of algorithm 15.1 of \cite Bier06-book
%> 
%> @author Michel Bierlaire
%> @date Wed Apr 16 22:52:18 2014
%> @ingroup Algorithms

%> Applies Gauss-Newton algorithm  to solve \f[\min_x f(x)= \frac{1}{2} g(x)^T g(x)\f] where \f$g:\mathbb{R}^n\to\mathbb{R}^m\f$. 
%> @param obj the name of the Octave function defining g(x) and its gradient matrix. It should return a vector of size m and a matrix of size n x m.
%> @param x0 the starting point
%> @param eps  algorithm stops if \f$\|\nabla g(x) g(x)\| \leq \varepsilon \f$. 
%> @param maxiter maximum number of iterations (Default: 100)
%> @return [solution,iteres,niter] solution: local minimum of the function, iteres: sequence of iterates generated by the algorithm, niter: total number of iterations
function [solution,iteres,niter] = a1501gaussNewton(obj,x0,eps,maxiter=100)
  iteres = zeros(1+ maxiter,4) ;
  n = size(x0,1) ;
  xk = x0 ;
  [g,gradg] = feval(obj,xk)  ;
  deriv = gradg * g ;
  iteres(1,:) = [xk'  g'*g  norm(deriv) ] ;
  k = 0 ;
  do 
    dk = - gradg * gradg' \ gradg * g ;
    xk = xk + dk ; 
    [g,gradg] = feval(obj,xk)  ;
    deriv = gradg * g ;
    k=k+1 ; 
    iteres(k+1,:) = [xk'  g'*g  norm(deriv) ] ;

  until (norm(deriv) <= eps || k >= maxiter)
  soluton = xk ;
  niter = k ;
endfunction